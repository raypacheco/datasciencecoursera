utils:::menuInstallPkgs()
splines
?splines
utils:::menuInstallPkgs()
set.seed(333)
x = rnorm(30)
sampledMean = rep(NA, 1000)
for(i in 1:1000){sampledMean[i] <- mean(rnorm(30))}
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library(devtools)
utils:::menuInstallPkgs()
set.seed(53535)
xValues = seq(0,2*pi, length=100)
yValues = rnorm(100) + sin(xValues)
library(splines)
ns1 <- ns(xValues, df=3)
lm1 <- lm(yValues ~ ns1)
summary(lm1)
rmse <- function(x,y) {sqrt(sum( (x-y)^2/length(x))}
rmse <- function(x,y) {sqrt(sum((x-y)^2/length(x))}
library(devtools)
install_github("medley", "mewo2")
ns1 <- ns(xValues, df=1:10)
ns1 <- ns(xValues, df=10)
par(mfrow=c(1,10))
plot(xValues, ns1[,1])
par(mfrow=c(1,1))
plot(xValues, ns1[,1])
plot(xValues, ns1[,2])
plot(xValues, ns1[,3])
plot(xValues, ns1[,4])
plot(xValues, ns1[,5])
plot(xValues, ns1[,6])
plot(xValues, ns1[,7])
plot(xValues, ns1[,8])
plot(xValues, ns1[,9])
plot(xValues, ns1[,10])
plot(xValues, ns1[,11])
lm1 <- lm(yValues ~ ns1)
summary(lm1)
rmse(predict(lm1), yValues)
library(medley)
rmse(predict(lm1), yValues)
ns1 <- ns(xValues, df=1)
ns2 <- ns(xValues, df=2)
ns3 <- ns(xValues, df=3)
ns4 <- ns(xValues, df=4)
ns5 <- ns(xValues, df=5)
ns6 <- ns(xValues, df=6)
ns7 <- ns(xValues, df=7)
ns8 <- ns(xValues, df=8)
ns9 <- ns(xValues, df=9)
ns10 <- ns(xValues, df=10)
lm1 <- lm(yValues~ns1)
lm2 <- lm(yValues~ns2)
lm3 <- lm(yValues~ns3)
lm4 <- lm(yValues~ns4)
lm5 <- lm(yValues~ns5)
lm6 <- lm(yValues~ns6)
lm7 <- lm(yValues~ns7)
lm8 <- lm(yValues~ns8)
lm9 <- lm(yValues~ns9)
lm10 <- lm(yValues~ns10)
rmse(predict(lm1), yValues)
rmse(predict(lm2), yValues)
rmse(predict(lm3), yValues)
rmse(predict(lm4), yValues)
rmse(predict(lm5), yValues)
rmse(predict(lm6), yValues)
rmse(predict(lm7), yValues)
rmse(predict(lm8), yValues)
rmse(predict(lm9), yValues)
rmse(predict(lm10), yValues)
plot(xValues, ns2)
plot(xValues, ns2[,2])
plot(xValues, ns2[,1])
par(mfrow=c(1,3))
plot(xValues, ns2[,1])
plot(xValues, ns2[,2])
plot(xValues, ns3[,1])
plot(xValues, ns3[,2])
plot(xValues, ns3[,3])
library(simpleboot)
utils:::menuInstallPkgs()
library(simpleboot)
data(airquality)
attach(airquality)
percentile(wind,.75)
quartile(wind,3)
quantile(wind,.75)
names(airquality)
quantile(Wind, .75)
set.seed(883833)
?one.boot
one.boot(Wind, sd, 1000)
set.seed(883833)
one.boot(Wind, quantile, R=1000, probs=.75)
set.seed(883833)
oneboot <- one.boot(Wind, quantile, R=1000, probs=.75)
sd(oneboot)
sd(oneboot$t)
myfun <- function(x) {quantile(x, .75)}
set.seed(883833)
airboot <- one.boot(Wind, myfun, 1000)
sd(airboot$t)
apply(airboot$t, 2, sd)
data(Cars93,package="MASS")
set.seed(7363)
library(tree)
utils:::menuInstallPkgs()
names(Cars93)
attach(Cars93)
tree1 <- tree(DriveTrain~Price + Type)
library(tree)
tree1 <- tree(DriveTrain~Price + Type)
tree2 <- tree(DriveTrain ~ Price + Type)
tree3 <- tree(DriveTrain ~ Price + Type)
set.seed(7363)
tree1 <- tree(DriveTrain~Price + Type)
tree2 <- tree(DriveTrain ~ Price + Type)
tree3 <- tree(DriveTrain ~ Price + Type)
newdata = data.frame(Type="Large", Price = 20)
pred <- predict(tree1, data=Cars93)
pred
summary(pred)
table(pred)
args(predict)
?predict
summary(tree1)
plot(tree1)
text(tree1)
par(mfrow=c(1,1))
plot(tree1)
text(tree1)
table(Cars93$DriveTrain, predict(tree1, type="class")
)
table(Cars93$DriveTrain, predict(tree2, type="class"))
table(Cars93$DriveTrain, predict(tree3, type="class"))
table(newdata$DriveTrain, predict(tree1, type="class"))
table(newdata$DriveTrain, predict(tree1, newdata, type="class"))
pred1 <- predict(tree1, newdata)
pred2<- predict(tree2, newdata)
pred3 <- predict(tree3, newdata)
table(Cars93$DriveTrain, pred1)
table(newdata$DriveTrain, pred1)
pred1 <- predict(tree1, newdata, type="class")
table(newdata$DriveTrain, pred1)
pred1
pred2
pred3
pred1
pred1 <- predict(tree1, newdata)
pred1
summary(newdata)
newdata
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
class(vowel.train$y)
vowel.train$y <-as.factor(vowel.train$y)
vowel.test$y <-as.factor(vowel.test$y)
class(vowel.train$y)
set.seed(33833)
gw()
wd()
dir()
load("samsungData.rda")
names(samsundData)
names(samsungData)
trainset = samsungData[samsungData$subject %in% c(1, 3, 5, 6, 7),]
testset = samsungData[samsungData$subject %in% c(27, 28, 29, 30),]
trainset$subject
args(save)
save(testset, trainset, file="samsungSets.rda")
summary(testset)
levels(samsungData$subject)
factor(SamsungData$subject)
factor(samsungData$subject)
trainset = samsungData[samsungData$subject %in% c(1,3,5,6,7,8,11,14,15,16,17),]
testset = samsungData[samsungData$subject %in% c(19,21,22,23,25,26,27,28,29,30),]
save(trainset, testset, file="samsungPredictorSets.rda")
validationset = trainset[trainset$subject %in% c(15,16,17)]
validationset = trainset[trainset$subject %in% c(15,16,17),]
data(iris)
attach(iris)
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width, data=iris)
summary(tree1)
plot(tree1)
label(tree1)
name(tree1)
text(tree1)
plot(Petal.Width, Sepal.Width, pch=19, col=as.numeric(Species))
partition.tree(tree1, label="Species", add=TRUE)
detach(iris)
k1 <- testset[testset$subject==1,]
tree1 <- tree(activity~., data=k1)
summary(tree1)
tree1 <- tree(activity ~ tBodyAcc-mean()-X + tBodyAcc-mean()-Y + tBodyAcc-mean()-Z + tGravityAcc-mean()-X + tGravityAcc-mean()-Y + tGravityAcc-mean()-Z + tBodyAccJerk-mean()-X + tBodyAccJerk-mean()-Y  tBodyAccJerk-mean()-Z + tBodyGyro-mean()-X + tBodyGyro-mean()-Y + tBodyGyro-mean()-Z, data=k1)
tree1 <tree(activity ~ [1], data=k1)
tree1 <tree(activity ~ 1, data=k1)
tree1 <tree(activity ~ [,1], data=k1)
tree1 <tree(activity ~ k1[,1], data=k1)
tree1 <tree(activity ~ k1[,1] + k2[,2], data=k1)
tree1 <tree(activity ~ k1[,1] + k1[,2], data=k1)
tree1 <tree(activity ~ k1[1,] + k1[2,], data=k1)
tree1 <tree(activity ~ k1[1] + k1[2], data=k1)
tree1 <- tree(activity ~ "tBodyAcc-mean()-X", data=k1)
tree1 <- tree(activity ~ tBodyAcc-mean()-X, data=k1)
tree1 <- tree(activity ~ 'tBodyAcc-mean()-X', data=k1)
tree1 <- tree(activity ~ tBodyAcc-mean()-X, data=k1)
dir()
sbux.df = read.csv("file=sbuxPrices.csv",header=TRUE)
sbux.df <- read.csv("sbuxPrices.csv")
sbux.df
type(sbux.df)
class(sbux.df)
str(sbux.df)
head(sbux.df)
tail(sbux.df)
colnames(sbux.df)
class(sbux.df$Date)
class(sbux.df$Adj.Close)
sbux.df[1:5, "Adj.Close"]
sbux.df[1:5, 2]
sbux.df$Adj.Close[1:5]
sbux.df$Adj.Close[1:5, drop=FALSE]
sbux.df$Adj.Close[1:5, drop=FALSE]
sbux.df[1:5, 2, drop=FALSE]
which(sbux.df$Date == "3/1/1994")
sbux.df[13:25]
sbux.df[13:25,]
sbuxPrices.df = sbux.df[, "adj.Close", drop=FAlSE]
sbuxPrices.df = sbux.df[, "Adj.Close", drop=FAlSE]
sbuxPrices.df <- sbux.df[, "Adj.Close", drop=FALSE]
rownames(sbuxPrices.df)
rownames(sbuxPrices.df) <- sbux.df$Date
head(sbuxPrices.df)
sbuxPrices.df["3/1/1994", 1]
sbuxPrices.df["3/1/1995", 1]
sbuxPrices.df["3/1/1994", 1, drop=FALSE]
plot(sbux.df$Adj.Close)
plot(sbux.df$Adj.Close, type="1", col="blue", lwd=2, ylab="Adjusted Close", main="Monthly closing prices of SBUX")
plot(sbux.df$Adj.Close, type=1, col="blue", lwd=2, ylab="Adjusted Close", main="Monthly closing prices of SBUX")
plot(sbux.df$Adj.Close, col="blue", lwd=2, ylab="Adjusted Close", main="Monthly closing prices of SBUX")
legend(x="topleft", legend="SBUX", lty=1, lwd=2, col="blue")
n <- nrow(sbuxPrices.df)
sbux.ret <- (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]
n
sbux.ret
class(sbux.ret)
names(sbux.ret) <- rownames(sbuxPrices.df)[2:n]
head(sbux.ret)
sbux.ret.df <- (sbuxPrices.df[2:n, 1, drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1L(n-1),1,drop=FALSE]
sbux.ret.df <- (sbuxPrices.df[2:n, 1, drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1(n-1),1,drop=FALSE]
sbux.ret.df <- (sbuxPrices.df[2:n, 1, drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
class(sbux.ret.df)
head(sbux.ret.df)
class(sbux.ret)
sbux.ccret <- log(1+sbux.ret)
names(sbux.ccret) = rownames(sbuxPrices.df)[2:n]
head(sbux.ccret)
head(cbing(sbux.ret,sbux.ccret))
head(cbind(sbux.ret,sbux.ccret))
par(mfrow=c(2,1))
plot(sbux.ret, type="linear", col="blue", lwd=2, ylab="Return", main="Monthly Simple Returns on SBUX")
plot(sbux.ret, type="1", col="blue", lwd=2, ylab="Return", main="Monthly Simple Returns on SBUX")
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",
main="Monthly Simple Returns on SBUX")
abline(h=0)
plot(sbux.ccret, type="l", col="blue", lwd=2, ylab="Return",
main="Monthly Continuously Compounded Returns on SBUX")
abline(h=0)
par(mfrow=c(1,1))
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",
main="Monthly Returns on SBUX")
abline(h=0)
lines(sbux.ccret, col="red", lwd=2)
legend(x="bottomright", legend=c("simple", "CC"), lty=1, lwd=2, col=(c("blue", "red"))
)
abline(h=0)
sbux.gret = 1 + sbux.ret
sbux.fv = cumprod(sbux.gret)
plot(sbux.fv, type="l", col="blue", lwd =2, ylab="Dollars", main="FV of $1 invested in SBUX")
head(sbux.gret)
sbux.gret
12+(1/3)+8+(3/4)+17+(2/8)+23+(2/3)+10+(5/10)
72.5/5
13-8
46.5-39
5/7.5
[1]*8
.66666667*8
+46.5
5.33333+46.5
x + 7*((1/12)*x) +(1/12)*x = 100
7/12
7*(1/12)
100*(12/20)
95/17
95*17
17-6
6*6
+55
55+356
55+26
55+36
7*6
10*5
50+42
10*6
7*5
35+60
vheads <- rbinom(n,1000,0.5)
n <- 1000
data.fram(exp = seq_len(n), Heads = rbinom(n,10,0.5))
coinflip <- data.frame(exp = seq_len(n), Heads = rbinom(n,10,0.5))
coinflip
summary(coinflip)
coinflip$exp[1]
coinflip$Heads[1]
coinflip$Heads[25]
min(coinflip$Heads)
max(coinflip[coinflip$Heads==1])
subset(coinflip, coinflip$Heads==1)
n=100000
coinflip2 <- data.frame(Exp_num = seq_len(n), Heads = rbinom(n,10,0.5))
subset(coinflip2, min(coinflip2$Heads))
min(coinflip2$Heads)
subset(coinflip2, coinflip2$Heads == 0)
plot(coinflip$exp, coinflip$Heads)
plot(coinflip$exp, coinflip$Heads)
hist(coinflip$Heads)
hist(coinflip2$Heads)
s
s = .09
sprime = .91
s + sprime
.09*.9
.91*.02
.081+.0182
.081/(.0992)
ca = [-,-4, -3, -2, 1, 7, 10, 11, 17, 18]
ca = (-5,-4, -3, -2, 1, 7, 10, 11, 17, 18)
ca = c(-5,-5,-3,-2,1,7,10,11,17,18)
ca
ca = c(-5,-4,-3,-2,1,7,10,11,17,18)
ca
median(ca)
placebo = c(-11, -5, -3, -3, -1, -1, -1, -1, 2, 3, 5, 12)
median(placebo)
ca - placebo
4+1
n = rep(NA, 100)
n
for (i in 1:100) {}
full = ca.append(placebo)
append(placebo)
?append
append(ca, placebo)
full = append(ca, placebo)
for (i in 1:100) {calcium = sample(full, 10, replace = FALSE)}
for (i in 1:100) {calcium = sample(full, 10, replace = FALSE) placebo = sample(full, 11, replace = FALSE)
for (i in 1:100) {
calcium = sample(full, 11, replace = FALSE)
}
8/15
bioclite()
source("http://bioconductor.org/biocLite.R")
biocLite()
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
load(installr)
require(installr)
updateR()
source("http://bioconductor.org/biocLite.R")
biocLiter()
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
biocLite()
biocLite()
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite()
getwd
getwd()
setwd(~/Users/Ray/Documents/GitHub/datasciencecoursera)
setwd("~/GitHub/datasciencecoursera")
dir()
install.packages("swirl")
load(swirl)
library(swirl)
ls()
rm(list=ls())
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
